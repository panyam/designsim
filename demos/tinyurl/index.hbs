<!DOCTYPE html>
<html>
  <head> {{>commonHeaders}} </head>
  <body>
    <div id = "header_div"><h1>Tiny URL Service</h1></div>
    <div id = "center_div">
      <h2><a name = "Introduction"></a>Introduction</h2>
      <p>
      TODO - Talk a bit why TinyURL and "examples"?
      </p>
      <p>
      <h2><a name = "Requirements"></a>Step 1 - Requirements</h2>
      You dont have many users for your social network right now, but one day you know it will be big.  Ultimately  we want to grow to that scale. But let us start small.  We are not quite building the UI but the basic service which will be called by a UI layer.  We will build our Service at a more functional level.  
      <h3>Functional Requirements</h3>
      First and foremost are the functional requirements of our system:
      <ul>
        <li>Create a unique TinyURL from a given URL – at most K case-sensitive alpha-numeric digits.  A particular url will always return the same tinyURL (for now)</li>
        <li>Redirect a TinyURL to original URL</li>
        <li>Allow custom Tiny URLs (upto 16 characters).</li>
      </ul>
      <h3>Extended Requirements</h3>
      <ul>
        <li>TinyURL Deletions and Expirations.</li>
        <li>User specific URLs.  Long URLs only need to be unique for a user.</li>
        <li>Compliance and Legal requirements (blacklisting, mark as low-quality etc)</li>
        <li>Analytics on Links clicked by:
          <ul>
            <li>URL</li>
            <li>Source</li></ul>
        </li>
        <li>Authentication and permissions on which users can follow TinyURLs.</li>
        <li>Rate-limiting/Throttling number of creations by User</li>
      </ul>
      <h3>Operational Requirements (SLOs)</h3>
      <ul>
        <li>URL Creations within <Var>WRITE_LATENCY_P95</Var> in 95th percentile</li>
        <li>Redirect Latency within <Var>READ_LATENCY_P95</Var> in 95th percentile</li>
        <li>Scalable, Highly Available</li>
        <li>Monitoring and Alerts available</li>
        <li>URL Retention for 10 years</li>
        <li>Geographically Distributed</li>
      </ul>
      <strong>Note:</strong> We will establish estimates in more detail shortly after we identify a very basic design.

      <h2><a name = "Modelling"></a>Step 2 - Modelling</h2>
      Our system has a few key entities and APIs.

      <h3>Entities</h3>
      <pre><code class="language-protobuf">
        // Size: approx 300 bytes
        record TinyURL {
          // Approx 32 characters for short *OR* custom ID
          id: string

          // Avg: 256 bytes
          longURL: string

          // Creation time stamp of the TinyURL
          // Will be set by service
          createdAt: Timestamp
        }
      </code></pre>

      <h3>Services</h3>

      Our TinyURL service exposes the following operations:

      <pre><code class="language-protobuf">
        TinyURLService {
          /**
           * Create a TinyURL given a LongURL.
           */
          Create(request : CreateRequest) -> TinyURL;

          /**
           * Return a TinyURL entity for a tiny URL ID.
           */
          Resolve(tinyURLId : string) -> TinyURL
        }

        record CreateRequest {
          /**
           * The original long URL for which a Tiny URL will be created.
           */
          longURL: string

          /**
           * Sometimes a creator may prefer a customId instead of an auto 
           * generated ID. This parameter allows that if the custom ID 
           * is not already taken.
           */
          customID: string? = null<!--

          /**
           * All good things must come to an end.  TinyURLs also expire 
           * at some point in time.  Default expiration is 1 year.
           */
          expiresIn: Timestamp = SECONDS_IN_ONE_YEAR
          -->
        }
      </code></pre>
      </p>

      <h2>Step 3 - Estimates</h2><a name = "Estimates"></a>

      A few estimates around the usage and expectations from our system will help us in how we design it with scale in mind.

      <h3>Usage Estimates</h3><a name = "Usage_Estimates"></a>
      <ul>
        <li>Average URL Size = 256Bytes</li>
        <li>Assuming 5B URL creations a month, Write QPS <br>= 5B / (30 * 100000)<br>= 2K QPS</li>
        <li>Assuming each TinyURL is consumed by 100 users on average, Redirect QPS <br>= 200K QPS </li>
        <li>Not all URLs are consumed equally.  “Hot” URLs could be seen abnormally more – say 10K times per URL. </li>
        <li>Percentage of “hot” URLs: 10%</li>
      </ul>

      <h3>Volume Estimates</h3><a name = "Volume_Estimates"></a>
      <h4><strong><span style="text-decoration: underline;">Number of URLs created</span></strong></h4>
      <p class="has-medium-font-size">= 2000 QPS * 86400 seconds per day = 170M<br>= 62B per Year</p>

      <h4><strong><span style="text-decoration: underline;">Total URLs Created Per Year</span></strong></h4>
      <p class="has-medium-font-size">= approx 70B</p>

      <p class="has-medium-font-size">With the 80/20 rule, 80% of URLs can be expired in 2 years, with the remaining 20% needing a 10 year tenure.  This brings the storage requirement to:<br>= 56 * 2 Year + 14 * 10 Years<br>= <strong>250B URLs over 10 years</strong><br><br><strong>FunFact</strong>: Number of pages currently indexed by Google: <a href="https://www.worldwidewebsize.com/">65B</a></p>

      <p class="has-medium-font-size"><strong>Number Digits Required, K<br></strong>= log(250B, 62)<br>= 7</p>

      <h3>Storage Estimates</h3><a name = "Storage_Estimates"></a>
      <p class="has-medium-font-size">For TinyURLs (normal or custom) over 10 years<br>= (250B) * sizeof(TinyURL)<br>= approx 75Tb</p>

      <h3>Bandwidth</h3>
      <h4>Inbound Bandwidth (Creation)</h4>
      <p>2000QPS * 300 Bytes per record = 600KBps</p>
      <h4>Outbound Bandwidth (Retrieval)</h4>
      <p>200KQPS * 300 Bytes per record = 60MBps</p>

      <h2>Step 4 - High Level Design</h2>
      <a name = "High_Level_Design"></a>

      Our requirements are pretty simple.  We can quickly bring up a MVP by using flask/express/rails webapp backed by a SQL DB.

      <h3>Database Design</h3>

      Not counting the User table we need only one table (and one related indexes) in our DB:

      <ol>
        <li>TinyURL Table: This table holds each TinyURL keyed on the ID.
          <pre><code class="language-sql">
            CREATE TABLE tiny_urls (
              id          varchar(32)     PRIMARY KEY,
              long_url    varchar(1024)   NOT NULL,
              created_at  DateTime        NOT NULL,
              UNIQUE (long_url);          // ====> Creates a unique index automatically.
            )
          </code></pre>
        </li>
      </ol>

      <p>
      <h3>Basic API Implementation</h3>
      <strong>Create</strong>: On a create, both the TinyURL table and the related indexes are updated (for unique constraint and for primary key - incurring three disk writes per creation).</li>
          <pre><code class="language-sql">
            def Create(request: CreateRequest) -> TinyURL:
              # Step 1 - See if long URL is already regsitered
              tinyUrl := findByLongURL(request.longURL)

              # Step 2 - If tinyUrl exists return it
              if tinyUrl exists:
                  return tinyUrl

              # Step 3 - Create it other wise - generate ID first (see next)
              tinyUrl = TinyURL(id = create_next_id(),
                  longURL = request.longURL,
                  createdAt = now(),
              )

              # Step 4 - Write the TinyURL entry into the DB with the generated ID
              # Assume a DB instance and some kind of ORM interface to our table exists
              insert_into_db(tinyUrl)

              if insertion successful:
                  return tinyUrl

              // Step 5 - A failure could mean duplicate ID or duplicate URL so go back to Step 1
              go back to Step 1
          </code></pre>
      <li>Resolve: On a resolution, the TinyURL table is looked up by key (by querying the index corresponding to the pkey).</li>
          <pre><code class="language-sql">
            def Resolve(tinyURLId: string) -> TinyURL:
              # Assume an ORM interface to our table exists
              return getById(tinyURLId)
          </code></pre>
      </p>

      <h3>Minimum Viable Product (MVP)</h3>
      <div class = "system_description">
      As a very basic MVP we have the following system.
      <strong>Go ahead and try to see how our system performs as we increase the load on it.</strong>

      <div>{{> include "demos/tinyurl/exercises/v1/main.hbs" }}</div>

      <strong>TODO - Can we show how the different components are doing so we can show (a) what the system is doing 
        as it is running (instead of just graphs over a static image) and (b) which systems are dying "first" to indicate botlenecks.  This would be useful in proposing next steps in scaling (db or web etc).</strong>

      </div>
      <h2>Step 5 - Scaling and Tradeoffs</h2><a name = "Scaling_And_TradeOffs"></a>

      Our basic system is not very scalable.   Timeouts start at around the 350 QPS mark (far from the needed 2K read QPS needed). Which components struggle to keep up?  The metrics shed light here.   Outbound latencies (reads and writes) for the Client flatten out at the timeout values (2s and 5s respectively for reads and writes).  As requests begin to queue up (beyond what the DB is able to handle), the DB's get and put latencies keep rising (around 350/s due to 1ms disk access latencies and a write taking about 2-3 IOPS (TODO - Explain index costs)).  A single DB node is insufficient.


      <p>
      We need multiple DB nodes so that load can be distributed across this fleet.  There is one issue however.   Until this point all data was stored in a single node.   This ensured we could perform transactional writes across both the TinyURL table and the associated indexes.  Once distributed, transactions are <a href="need a link here">harder</a>.

      <div>{{> include "demos/tinyurl/exercises/v2/main.hbs" }}</div>

      But right now all this is possible.  Why cant we just show the latency graph of the DB now?

      Storage

      IO

      Our web server even sporting the best SSDs can bring down disk access latencies to 1ms (resulting in 1000 IOPS).  With a creation taking typically 3 writes (about 3ms) and a resolution taking typically 2 reads our max QPS comes to around 350QPS (
    </div>
    <div id = "footer_div">
      <a style="float: left" href = "/demos/">Previous</a>
      <a style="float: right" href = "/demos/">Next</a>
    </div>

    {{>commonFooters}}
  </body>
</html>
